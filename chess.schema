// Data types

enum Color:byte { WHITE, BLACK, RANDOM }
enum FriendRequestStatus:byte { ACCEPTED, PENDING }
enum GameResult:byte { 
    WHITE_WON, 
    BLACK_WON, 
    DRAW, 
    INSUFFICIENT_MATERIAL, 
    INSUFFICIENT_MATERIAL_AND_FLAG, 
    STALEMATE, 
    REPETITION, 
    FIFTY_MOVE, 
    FLAG 
}
enum Error:byte { 
    INVALID_PACKET_ERROR,
    NOT_IMPLEMENTED_ERROR, 
    LOGIN_FAILED_ERROR, 
    REGISTER_FAILED_ERROR,
    ILLEGAL_MOVE_ERROR,
    INTERNAL_SERVER_ERROR,
    INVALID_SESSION_TOKEN,
    USER_DOESNT_EXIST_ERROR,
    DATABASE_ERROR
}

// All measurements of time are in milliseconds
// Note: Restart server every 136 years

// Client -> Server

table LoginRequest {
    username:string;
    password:string;
}

table RegisterRequest {
    username:string;
    password:string;
}

table UserLookupRequest {
    session_token:[uint8:16];
    page:uint32;
    page_size:uint8;
    elo_range_start:uint16;
    elo_range_stop:uint16;
    friends:bool;
    connection_status:bool;
    game_status:bool;
}

table GameInviteRequest {
    session_token:[uint8:16];
    username:string;
    time_control_sender:uint32;
    time_increment_sender:uint32;
    time_control_receiver:uint32;
    time_increment_receiver:uint32;
    color:Color;
}

table ResolveGameInviteRequest {
    session_token:[uint8:16];
    accepted_status:bool;
    game_id:string;
}

table FullGameInformationRequest {
    session_token:[uint8:16];
    game_id:string;
}

table GameMoveRequest {
    session_token:[uint8:16];
    game_id:string;
    // Source and destination squares
    src:uint8;
    dest:uint8;
}

table GameLastMoveRequest {
    session_token:[uint8:16];
    game_id:string;
}

table GameHeartbeatRequest {
    session_token:[uint8:16];
    game_id:string;
}

table GameDrawOfferRequest {
    session_token:[uint8:16];
    game_id:string;
}

table GameDrawOfferResponse {
    session_token:[uint8:16];
    game_id:string;
    accept:bool;
}

table GameResignationRequest {
    session_token:[uint8:16];
    game_id:string;
}

table FriendRequest {
    session_token:[uint8:16];
    username:string;
}

table FriendRequestResponse {
    session_token:[uint8:16];
    accept:bool;
}

table FriendRequestStatusRequest {
    session_token:[uint8:16];
}

table ActiveGameRequest {
    session_token:[uint8:16];
}

table GameHistoryRequest {
    username:string;
    session_token:[uint8:16];
}

table PastGameFullInformationRequest {
    session_token:[uint8:16];
    game_id:string;
}

// Let me know if anyone invites me to a game
table GameInviteSubscribe {
    session_token:[uint8:16];
}

// Let me know if anyone accepts a game invite I sent them
table GameInviteResponseSubscribe {
    session_token:[uint8:16];
}

// Let me know if moves happen in a game
table GameSubscribe {
    session_token:[uint8:16];
    game_id:string;
}

// Let me know if anyone sends me a friend request
table FriendRequestSubscribe {
    session_token:[uint8:16];
}

table FriendRequestAcceptedSubscribe {
    session_token:[uint8:16];
}

table PendingGamesRequest {
    session_token:[uint8:16];
}

/*
table DeactivateAccountRequest {
    session_token:[uint8:16];
}

table ReactivateAccountRequest {
    username:string;
    // Some identifier  
}

table DeleteAccountRequest {
    session_token:[uint8:16];
}
// TODO add replies
*/

// TODO add a way to check on whether or not a game was declined

// Client <- Server

table LoginReply {
    session_token:[uint8:16];
}

table RegisterReply {
    session_token:[uint8:16];
}

table UserLookupMatch {
    username:string;
    elo:uint16;
    friends:bool;
    connection_status:bool;
    game_status:bool;
}

table UserLookupReply {
    users_matched:[UserLookupMatch];
}

table GameInviteReply {
}

table GameInviteNotification {
    game_id:string;
    username:string;
    time_control_sender:uint32;
    time_increment_sender:uint32;
    time_control_receiver:uint32;
    time_increment_receiver:uint32;
    color:Color;
}

table GameAcceptNotification {
    game_id:string;
}

table GameDeclineNotification {
    game_id:string;
}

table GameInviteTimedOutNotification {
    game_id:string;
}

table FullGameInformationReply {
    username:string;
    elo:uint16;
    time_increment_player:uint32;
    time_increment_opponent:uint32;
    time_remaining_player:uint32;
    time_remaining_opponent:uint32;
    move_history:[uint8];
    color:Color;
}

table GameMoveReply {
}

table GameMoveNotification {
    src:uint8;
    dest:uint8;
}

table GameLastMoveReply {
    src:uint8;
    dest:uint8;
    draw_offer:bool;
}

table GameHeartbeatReply {
    time_remaining_player:uint32;
    time_remaining_opponent:uint32;
}

table GameDrawOfferNotification {
    game_id:string;
}

table GameDrawOfferDeclinedNotification {
    game_id:string;
}

table GameOverNotification { 
    winner:string;
    elo_white:uint16;
    elo_black:uint16;
    result:GameResult;
}

table FriendRequestNotification {
    username:string;
}

table FriendRequestAcceptedNotification {
    username:string;
}

table IndividualFriendRequestStatus {
    username:string;
    request_status:FriendRequestStatus;
    elo:uint16;
    connection_status:bool;
    game_status:bool;
}

table FriendRequestStatusReply {
    friend_requests:[IndividualFriendRequestStatus];
}

table ActiveGameReply {
    game_ids:[string];
}

table ErrorReply {
    error:Error;
}

table IndividualGameHistoryReply {
    white:string;
    black:string;
    date:string;
    game_result:GameResult;
    game_id:string;
}

table GameHistoryReply {
    games:[IndividualGameHistoryReply];
}

table PastGameFullInformationReply {
    white:string;
    black:string;
    time_increment_white:uint32;
    time_increment_black:uint32;
    move_history:[uint8];
    time_used:[uint32];
}

table PendingGamesReply {
    games:[GameInviteNotification];
}
